pipeline {
    
    agent any

    stages {
        stage('Checkout') {
            steps {
                echo 'Checkout Code from GitHub'
                git branch: 'master', url: 'https://github.com/Rekapost/AmazonTestNG.git'
            }
        }

        stage('Build and Test') {
                    steps {
                        echo 'Running Maven tests'
                        // Run your Maven tests using the testng.xml configuration file
                        bat 'mvn clean test -Dsurefire.suiteXmlFiles=testng.xml'  // Adjust if you have a specific testng.xml or configuration
                    }
                }


        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "https://sonarcloud.io"
                SONAR_PROJECT_KEY = "AmazonTestNG"  // Replace with your actual SonarCloud project key
                SONAR_ORG = "rekasonar"  // Replace with your SonarCloud organization key
            }
            steps {
                withCredentials([string(credentialsId: 'SONAR_CLOUD_TOKEN', variable: 'SONAR_AUTH_TOKEN')]) {
                    echo "Running SonarCloud Analysis for project: ${SONAR_PROJECT_KEY}"
                    bat "mvn clean verify sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.organization=${SONAR_ORG} -Dsonar.host.url=${SONAR_URL} -Dsonar.login=$SONAR_AUTH_TOKEN"
                }
            }
        }

        stage('Docker Version Check') {
            steps {
                bat 'docker --version'  // Check if Docker is accessible
            }
        }

        stage('Build and Push Docker Image') {
             environment {
                    DOCKER_IMAGE = "reka83/amazon-testng:${BUILD_NUMBER}"
                    REGISTRY_CREDENTIALS = credentials('docker-cred')
                }
            steps {
                script {
                    echo 'Building Docker Image'
                    // Debugging Docker build command
                    bat "docker build -t ${DOCKER_IMAGE} ."
                    
                    echo 'Pushing Docker Image to Docker Hub'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    
                    // Debugging Docker push command
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                    dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "AmazonTestNG"
                GIT_USER_NAME = "Rekapost"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    echo "Configuring git settings"
                    bat """
                        git config user.email "rekaharisri@gmail.com"
                        git config user.name "Reka"
                        
                        # Set the build number
                        set BUILD_NUMBER=%BUILD_NUMBER%

                        # Replace the placeholder with the build number using PowerShell
                        powershell -Command "(Get-Content java-app-manifests/deployment.yml) -replace 'replaceImageTag', '%BUILD_NUMBER%' | Set-Content java-app-manifests/deployment.yml"

                        # Stage the changes for commit
                        git add java-app-manifests/deployment.yml

                        # Commit the changes
                        git commit -m "Update deployment image to version %BUILD_NUMBER%"

                        # Push the changes to the repository
                        git push https://%GITHUB_TOKEN%@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:master
                    """
                }
            }
        }
    }
        post {
        success {
            echo 'Tests passed successfully!'
        }
        failure {
            echo 'Tests failed, please check the logs.'
        }
    }
}